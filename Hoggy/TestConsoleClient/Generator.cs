using DataTransferObjects;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TestConsoleClient.AuthenticationService;
using TestConsoleClient.CreationService;
using TestConsoleClient.DataExchangeService;
using TestConsoleClient.RegistationService;

namespace TestConsoleClient
{
    public class Generator
    {
        DataExchangeContractClient dataExchangeClient;
        RegistrationContractClient registrationClient;
        AuthenticationContractClient authenticationClient;
        CreationContractClient creationClient;

        public Generator()
        {
            dataExchangeClient = new DataExchangeContractClient();
            dataExchangeClient.Open();
            registrationClient = new RegistrationContractClient();
            registrationClient.Open();
            authenticationClient = new AuthenticationContractClient();
            authenticationClient.Open();
            creationClient = new CreationContractClient();
            creationClient.Open();
        }

        public void InitializeHierarchy()
        {
            List<AuthenticationToken> tokens = RegisterAndLoginUsers(5);
            List<UserDTO> users = new List<UserDTO>();
            foreach (var token in tokens)
            {
                users.Add(dataExchangeClient.GetUser(token));
            }
            for (int i = 0; i < 5; i++)
            {
                AddBoards(tokens[i], 5);
                List<BoardDTO> boards = dataExchangeClient.GetBoards(tokens[i], users[i].Id).ToList();
                foreach (var b in boards)
                {
                    AddColumns(tokens[i], b.Id, 5);
                    List<ColumnDTO> columns = dataExchangeClient.GetColumns(tokens[i], b.Id).ToList();
                    foreach (var c in columns)
                    {
                        AddCards(tokens[i], c.Id, 3);
                    }
                }
            }
        }

        public List<AuthenticationToken> RegisterAndLoginUsers(int amount)
        {
            List<AuthenticationToken> loggedUsers = new List<AuthenticationToken>();
            for (int i = 0; i < amount; i++)
            {
                UserDTO newUser = new UserDTO
                {
                    Email = "user" + (i + 1).ToString() + "@gmail.com",
                    Login = "user" + (i + 1).ToString()
                };
                registrationClient.RegisterUser(newUser, "user" + (i + 1).ToString());
                loggedUsers.Add(authenticationClient.Login(newUser.Email, "user" + (i + 1).ToString()));
                Console.WriteLine("User " + (i + 1).ToString() + " registered");
            }
            return loggedUsers;
        }

        public void AddBoards(AuthenticationToken token, int amount)
        {
            for (int i = 0; i < amount; i++)
            {
                BoardDTO board = new BoardDTO
                {
                    CreationDate = DateTime.Now,
                    Description = "Autogenerated board number " + (i + 1).ToString(),
                    Name = "TestBoard" + (i + 1).ToString()
                };
                creationClient.AddBoard(token, board);
                Console.WriteLine("Board " + (i + 1).ToString() + " added");
            }
        }

        public void AddColumns(AuthenticationToken token, int boardId, int amount)
        {
            for (int i = 0; i < amount; i++)
            {
                ColumnDTO column = new ColumnDTO
                {
                    Description = "Autogenerated column number " + (i + 1).ToString(),
                    Name = "TestColumn" + (i + 1).ToString()
                };
                creationClient.AddColumn(token, column, boardId);
                Console.WriteLine("Column " + (i + 1).ToString() + " added");
            }
        }

        public void AddCards(AuthenticationToken token, int columnId, int amount)
        {
            for (int i = 0; i < amount; i++)
            {
                CardDTO card = new CardDTO
                {
                    ExpireDate = DateTime.Now.AddDays(2),
                    CreationDate = DateTime.Now,
                    Description = "Autogenerated card number " + (i + 1).ToString(),
                    Name = "TestCard" + (i + 1).ToString()
                };
                creationClient.AddCard(token, card, columnId);
                Console.WriteLine("Card " + (i + 1).ToString() + " added");
            }
        }
    }
}
