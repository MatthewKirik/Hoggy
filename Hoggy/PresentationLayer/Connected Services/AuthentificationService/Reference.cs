//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PresentationLayer.AuthentificationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuthentificationService.IAuthenticationContract")]
    internal interface IAuthenticationContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationContract/CheckUserIsRegistered", ReplyAction="http://tempuri.org/IAuthenticationContract/CheckUserIsRegisteredResponse")]
        bool CheckUserIsRegistered(DataTransferObjects.UserDTO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationContract/CheckUserIsRegistered", ReplyAction="http://tempuri.org/IAuthenticationContract/CheckUserIsRegisteredResponse")]
        System.Threading.Tasks.Task<bool> CheckUserIsRegisteredAsync(DataTransferObjects.UserDTO user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IAuthenticationContractChannel : PresentationLayer.AuthentificationService.IAuthenticationContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class AuthenticationContractClient : System.ServiceModel.ClientBase<PresentationLayer.AuthentificationService.IAuthenticationContract>, PresentationLayer.AuthentificationService.IAuthenticationContract {
        
        public AuthenticationContractClient() {
        }
        
        public AuthenticationContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckUserIsRegistered(DataTransferObjects.UserDTO user) {
            return base.Channel.CheckUserIsRegistered(user);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserIsRegisteredAsync(DataTransferObjects.UserDTO user) {
            return base.Channel.CheckUserIsRegisteredAsync(user);
        }
    }
}
